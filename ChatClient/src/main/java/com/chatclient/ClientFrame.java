/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chatclient;

import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Deniz.Yasar
 */
public class ClientFrame extends javax.swing.JFrame {

    ArrayList<ClientChatFrame> clientchatlist = new ArrayList<ClientChatFrame>();
    ArrayList<GroupChatFrame> groupchatlist = new ArrayList<GroupChatFrame>();

    public ClientFrame() {
        initComponents();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        this.getRootPane().setDefaultButton(btnSend);
        this.setTitle(this.getTitle() + " -- " + ActiveClient.getInstance().getName());
        new Thread(new Client()).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChatHistory = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        txtMsg = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        spClients = new javax.swing.JScrollPane();
        jlClients = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlGroups = new javax.swing.JList<>();
        btnCreateGroup = new javax.swing.JButton();
        txtGroupName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat Client");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat History"));

        txtChatHistory.setEditable(false);
        txtChatHistory.setColumns(20);
        txtChatHistory.setRows(5);
        jScrollPane1.setViewportView(txtChatHistory);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(txtMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnSend))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Clients"));

        jlClients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlClientsMouseClicked(evt);
            }
        });
        spClients.setViewportView(jlClients);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spClients, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spClients)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Groups"));

        jlGroups.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlGroupsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jlGroups);

        btnCreateGroup.setText("Create Group");
        btnCreateGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateGroupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(txtGroupName)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(btnCreateGroup)
                .addGap(36, 36, 36))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtGroupName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCreateGroup)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (!txtMsg.getText().equals("")) {
            ActiveClient.getInstance().sendMessage("MSG ALL^" + txtMsg.getText());
            txtMsg.setText("");
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            ActiveClient.getInstance().getSocket().close();
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnCreateGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateGroupActionPerformed
        if (!"".equals(txtGroupName.getText())) {
            ActiveClient.getInstance().sendMessage("CREATE GROUP^" + txtGroupName.getText());
            txtGroupName.setText("");
        }

    }//GEN-LAST:event_btnCreateGroupActionPerformed

    private void jlClientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlClientsMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            String clientName = jlClients.getSelectedValue();
            //check if same client
            if (!clientName.equals(ActiveClient.getInstance().getName())) {
                //check if window already exists           
                ClientChatFrame res = null;
                for (ClientChatFrame ccf : clientchatlist) {
                    if (ccf.remoteClientName.equals(clientName)) {
                        res = ccf;
                        break;
                    }
                }
                if (res == null) {
                    ClientChatFrame ccf = new ClientChatFrame(clientName, clientchatlist);
                    clientchatlist.add(ccf);
                    ccf.setVisible(true);
                } else {
                    res.toFront();
                    res.repaint();
                }
            }
        }
    }//GEN-LAST:event_jlClientsMouseClicked

    private void jlGroupsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlGroupsMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            String groupName = jlGroups.getSelectedValue();
            GroupChatFrame gcf = new GroupChatFrame(groupName, clientchatlist, groupchatlist);
            groupchatlist.add(gcf);
            gcf.setVisible(true);
            ActiveClient.getInstance().sendMessage("JOIN GROUP^" + groupName);

    }//GEN-LAST:event_jlGroupsMouseClicked

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateGroup;
    private javax.swing.JButton btnSend;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jlClients;
    private javax.swing.JList<String> jlGroups;
    private javax.swing.JScrollPane spClients;
    private javax.swing.JTextArea txtChatHistory;
    private javax.swing.JTextField txtGroupName;
    private javax.swing.JTextField txtMsg;
    // End of variables declaration//GEN-END:variables

    private class Client implements Runnable {

        public Client() {
        }

        @Override
        public void run() {
            while (true) {
                String msg = ActiveClient.getInstance().receiveMessage();
                DefaultListModel listModel = new DefaultListModel();
                String source;
                String message;
                String destination;
                ClientChatFrame cres = null;
                GroupChatFrame gres = null;

                switch (msg.split("\\^")[0]) {
                    case "CLIENTS":

                        for (String s : msg.split("\\^")[1].split("\n")) {
                            listModel.addElement(s);
                        }
                        jlClients.setModel(listModel);
                        break;
                    case "GROUPS":

                        for (String s : msg.split("\\^")[1].split("\n")) {
                            listModel.addElement(s);
                        }
                        jlGroups.setModel(listModel);
                        break;
                    case "GROUPCLIENTS":
                        String groupName = msg.split("\\^")[1];

                        for (String s : msg.split("\\^")[2].split("\n")) {
                            listModel.addElement(s);
                        }
                        GroupChatFrame res = null;
                        for (GroupChatFrame gcf : groupchatlist) {
                            if (gcf.groupName.equals(groupName)) {
                                res = gcf;
                                break;
                            }
                        }
                        if (res != null) {
                            res.groupClients().setModel(listModel);
                        }

                        break;
                    case "MSG":
                        source = msg.split("\\^")[1];
                        message = msg.split("\\^")[2];
                        txtChatHistory.append(source + ": " + message);
                        break;
                    case "MSGC":
                        source = msg.split("\\^")[1];
                        destination = msg.split("\\^")[2];
                        message = msg.split("\\^")[3];

                        for (ClientChatFrame ccf : clientchatlist) {
                            if (ccf.remoteClientName.equals(source)) {
                                cres = ccf;
                                break;
                            }
                        }
                        if (cres == null) {
                            ClientChatFrame ccf = new ClientChatFrame(source, clientchatlist);
                            clientchatlist.add(ccf);
                            ccf.setVisible(true);
                            cres = ccf;
                        }
                        cres.chatHistory().append(source + ": " + message);
                        break;
                    case "MSGG":
                        source = msg.split("\\^")[1];
                        destination = msg.split("\\^")[2];
                        message = msg.split("\\^")[3];

                        for (GroupChatFrame gcf : groupchatlist) {
                            if (gcf.groupName.equals(destination)) {
                                gres = gcf;
                                break;
                            }
                        }
                        gres.chatHistory().append(source + ": " + message);
                        break;
                }
            }
        }
    }
}
