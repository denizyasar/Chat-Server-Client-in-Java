/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chatserver;

import java.io.DataInputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ServerFrame extends javax.swing.JFrame {

    Server server = new Server();

    public ServerFrame() {
        initComponents();
        //create server thread and start
        new Thread(server).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        lblStatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtClients = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtGroups = new javax.swing.JTextArea();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat Server");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(600, 400));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setFocusable(false);
        jToolBar1.add(lblStatus);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Client List"));

        txtClients.setEditable(false);
        txtClients.setColumns(20);
        txtClients.setLineWrap(true);
        txtClients.setRows(5);
        jScrollPane1.setViewportView(txtClients);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Group List"));

        txtGroups.setEditable(false);
        txtGroups.setColumns(20);
        txtGroups.setLineWrap(true);
        txtGroups.setRows(5);
        jScrollPane2.setViewportView(txtGroups);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
        );

        btnStart.setText("Start Server");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop Server");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(btnStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        new Thread(server).start();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        server.stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        server.stop();
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ServerFrame sf = new ServerFrame();
                sf.setLocationRelativeTo(null);//center on screen
                sf.setVisible(true);

            }
        });
    }

    private class ClientThread implements Runnable {

        Socket socket;

        public ClientThread(Socket s) {
            socket = s;
        }

        @Override
        public void run() {
            Client client = null;
            try {

                //first message for login
                DataInputStream din = new DataInputStream(socket.getInputStream());
                String msg = din.readUTF();
                String name = msg.split(" ")[0];

                //check condition
                if (true) {
                    client = new Client(name, socket);
                    client.sendMessage("SUCCESS");

                    updateClientList();
                    updateGroupList();
                } else {
                    socket.close();
                    return;
                }
                while (!socket.isClosed()) {
                    //read from client
                    String text = client.receiveMessage();
                    String command = text.split("\\^")[0];
                    String message = text.split("\\^")[1];
                    switch (command) {
                        case "EXIT":
                            client.removeClient(client);
                            updateClientList();
                            break;
                        case "MSG ALL":
                            sendClients(client.getName(), message);
                            break;
                        case "CREATE GROUP":
                            Group group = new Group(message, client.getName());
                            updateGroupList();
                            break;
                        case "JOIN GROUP":
                            Group.findGroup(message).addClient(client);
                            updateGroupClientList(message);
                            break;
                        case "LEAVE GROUP":
                            Group.findGroup(message).removeClient(client);
                            updateGroupClientList(message);
                            break;

                        case "MSG CLIENT":
                            String ctarget = message;
                            String cmessage = text.split("\\^")[2];
                            //source destination
                            Client.findClient(ctarget).sendMessage("MSGC^" + client.getName() + "^" + ctarget + "^" + cmessage + "\n");
                            break;
                        case "MSG GROUP":
                            String target = message;
                            String gmessage = text.split("\\^")[2];
                            //source destination
                            Group targetGroup = Group.findGroup(target);
                            for (Client c : targetGroup.getClients()) {
                                c.sendMessage("MSGG^" + client.getName() + "^" + target + "^" + gmessage + "\n");
                            }
                            break;
                    }
                }
            } catch (IOException ioe) {
                //client disconnect
                client.removeClient(client);
                updateClientList();
            }
        }

        private void updateGroupClientList(String groupName) {
            Group targetGroup = Group.findGroup(groupName);
            for (Client c : targetGroup.getClients()) {
                c.sendMessage("GROUPCLIENTS^" + groupName + "^" + targetGroup.clientNamesToString());
            }
        }

        private void updateGroupList() {
            if (Group.getGroups().size() > 0) {
                txtGroups.setText(Group.groupNamesToString());//server list
                //inform clients about change
                for (Client c : Client.getClients()) {
                    c.sendMessage("GROUPS^" + Group.groupNamesToString());
                }
            }
        }

        private void updateClientList() {
            txtClients.setText(Client.clientNamesToString());//server list
            //inform clients about change
            for (Client c : Client.getClients()) {
                c.sendMessage("CLIENTS^" + Client.clientNamesToString());
            }
        }

        private void sendClients(String clientName, String msg) {
            for (Client c : Client.getClients()) {
                c.sendMessage("MSG^" + clientName + "^" + msg + "\n");
            }
        }
    }

    public class Server implements Runnable {

        private final int port = 6789;
        ServerSocket ss;

        @Override
        public void run() {
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

            lblStatus.setText("Chat server started at " + formatter.format(new Date()) + " --- Port: " + port);
            try {
                ss = new ServerSocket(port);
                //accepting connections from clients
                while (true) {
                    Socket s = ss.accept();
                    //assign new thread to each client
                    new Thread(new ServerFrame.ClientThread(s)).start();
                }
            } catch (IOException ioe) {
                lblStatus.setText(ioe.toString());
            }
        }

        public void stop() {
            try {
                ss.close();
            } catch (IOException ex) {
                lblStatus.setText(ex.toString());
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextArea txtClients;
    private javax.swing.JTextArea txtGroups;
    // End of variables declaration//GEN-END:variables
}
